{"version":3,"sources":["components/landingpage.js","components/sortingAlgorithms/sortingAlgorithms.js","components/sortingVisualizer/sortingVisualizer.jsx","components/graphVisualizer/Node/Node.jsx","components/graphAlgorithms/dijkstra.js","components/graphVisualizer/graphVisualizer.jsx","components/contact.js","components/login.js","components/register.js","components/admin.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","style","width","margin","className","col","to","href","rel","target","aria-hidden","Component","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","map","value","idx","key","Button","variant","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Node","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathFindingVisualizer","mouseIsPressed","getInitialGrid","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","animateShortestPath","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","size","visualizeDijkstra","window","location","reload","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","Contact","Login","Register","Admin","Main","exact","path","component","LandingPage","Sorting","App","title","textDecoration","scroll","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f7262f6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Cell } from 'react-mdl';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nclass Landing extends Component {\r\n  render() {\r\n    return(\r\n      <div style={{width: '100%', margin: 'auto'}}>\r\n        <Grid className=\"landing-grid\">\r\n          <Cell col={12}>\r\n            <div className=\"banner-text\">\r\n              <h1>Visual Demo</h1>\r\n            <hr/>\r\n\r\n          <p>\r\n            Searching | <Link to=\"/sorting\">Sorting</Link> | <Link to=\"/graphs\">Graph</Link> | Strings | Algorithmic Patterns | System Design </p>\r\n\r\n        <div className=\"social-links\">\r\n\r\n          {/* LinkedIn */}\r\n          <a href=\"https://www.linkedin.com/in/parkjsdev/\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n            <i className=\"fa fa-linkedin-square\" aria-hidden=\"true\" />\r\n          </a>\r\n\r\n          {/* Github */}\r\n          <a href=\"https://github.com/park-jsdev\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n            <i className=\"fa fa-github-square\" aria-hidden=\"true\" />\r\n          </a>\r\n        </div>\r\n            </div>\r\n          </Cell>\r\n{/* \r\n          <Cell row={2} col={12}>\r\n            <div className=\"banner-text\">\r\n              <h1>News Feed</h1>\r\n            <hr/>\r\n\r\n          <p>We want news feed here </p>\r\n            </div>\r\n          </Cell> */}\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Landing;","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './sortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 0.75;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 300;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'violet';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 730));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n\r\n  }\r\n\r\n  heapSort() {\r\n\r\n  }\r\n\r\n  bubbleSort() {\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        <div><br/></div>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n\r\n        <div className=\"array-buttons\">\r\n        <Button variant=\"outline-primary\" onClick={() => this.resetArray()}>Generate New Array</Button>{' '}\r\n        <Button variant=\"outline-light\" onClick={() => this.mergeSort()}>Merge Sort</Button>{' '}\r\n        <Button variant=\"outline-light\" onClick={() => this.quickSort()}>Quick Sort</Button>{' '}\r\n        <Button variant=\"outline-light\" onClick={() => this.heapSort()}>Heap Sort</Button>{' '}\r\n        <Button variant=\"outline-light\" onClick={() => this.bubbleSort()}>Bubble Sort</Button>{' '}\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}","import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    // Event Listeners for mouse\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall) continue;\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","import React, { Component } from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../graphAlgorithms/dijkstra\";\r\n\r\nimport \"./graphVisualizer.css\";\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 10;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 30;\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n      <div className=\"graph-buttons\">\r\n        <Button variant=\"outline-primary\" size=\"lg\" onClick={() => this.visualizeDijkstra()}>Start</Button>{' '}\r\n        <Button variant=\"outline-danger\" size=\"lg\" onClick={() => window.location.reload(false)}>Reset</Button>{' '}\r\n        </div>\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n\r\n  }\r\n}\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 25; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 40; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nclass Contact extends Component {\r\n    render() {\r\n      return(\r\n        <h1>Coming soon!</h1>\r\n      )\r\n    }\r\n  }\r\n  export default Contact;","import React, { Component } from 'react';\r\n\r\nclass Login extends Component {\r\n    render() {\r\n      return(\r\n        <h1>Coming soon!</h1>\r\n      )\r\n    }\r\n  }\r\n  export default Login;","import React, { Component } from 'react';\r\n\r\nclass Register extends Component {\r\n    render() {\r\n      return(\r\n        <h1>Coming soon!</h1>\r\n      )\r\n    }\r\n  }\r\n  export default Register;","import React, { Component } from 'react';\r\n\r\nclass Admin extends Component {\r\n    render() {\r\n      return(\r\n        <h1>Coming soon!</h1>\r\n      )\r\n    }\r\n  }\r\n  export default Admin;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport LandingPage from './landingpage';\r\nimport Sorting from './sortingVisualizer/sortingVisualizer';\r\nimport PathFindingVisualizer from './graphVisualizer/graphVisualizer';\r\nimport Contact from './contact';\r\nimport Login from './login';\r\nimport Register from './register';\r\nimport Admin from './admin';\r\n\r\n\r\n\r\nconst Main = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={LandingPage} />\r\n    <Route path=\"/sorting\" component={Sorting} />\r\n    <Route path=\"/graphs\" component={PathFindingVisualizer} />\r\n    <Route path=\"/contact\" component={Contact} />\r\n    <Route path=\"/admin\" component={Admin} />\r\n    <Route path=\"/register\" component={Register} />\r\n    <Route path=\"/login\" component={Login} />\r\n  </Switch>\r\n)\r\n\r\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport Main from './components/main';\nimport { Link } from 'react-router-dom';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"demo-big-content\">\n    <Layout>\n        <Header className=\"header-color\" title={<Link style={{textDecoration: 'none', color: 'white'}} to=\"/\">Visual Demo</Link>} scroll>\n            <Navigation>\n              <Link to=\"/admin\">Admin</Link>\n              <Link to=\"/register\">Register</Link>\n              <Link to=\"/login\">Login</Link>\n              <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n        </Header>\n\n        <Drawer title={<Link style={{textDecoration: 'none', color: 'black'}} to=\"/\">Visual Demo</Link>} >\n            <Navigation>\n              {/* <Link to=\"/search\">Searching Algorithms</Link> */}\n              <Link to=\"/sorting\">Sorting Algorithms</Link>\n              <Link to=\"/graphs\">Graph Algorithms</Link>\n              {/* <Link to=\"/patterns\">Algorithmic Patterns</Link> */}\n            </Navigation>\n        </Drawer>\n        <Content>\n            <div className=\"page-content\" />\n            <Main/>\n        </Content>\n    </Layout>\n</div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <BrowserRouter>\n  <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}